# Author: Lassi Kojo <lassi@lko.fi> / Lassi Kojo Oy
# License: GPL-3.0

# Changelog:
# 3.0.0: 1.2.2020 - Complete refactoring and first iteration of ECS compatability. / LKo
# 2.0.2: 20.11.2019 - Added category and priority translates. / LKo
# 2.0.1: 20.11.2019 - Fixed typo with mutate replace filter. / LKo
# 2.0.0: 20.11.2019 - Refactored and merged SRA/SMA and FW configs. / LKo

input {
  udp {
    host => "<logstash_listening_ip>"
    port => 5514
    source_ip_fieldname => "[observer][ip]"
    id => "input-udp-sonicwall"
  }
}

filter {
  # Preserve original raw message.
  mutate {
    copy => { "message" => "[log][original]" }
  }

  # Extract key-value pairs into fields.
  kv {
    exclude_keys => [ "n", "vp_time" ]
  }

  # Read timestamp from the log message.
  if "UTC" in [time] {
    date {
      match => [ "time", "yyyy-MM-dd HH:mm:ss 'UTC'" ]
      timezone => "UTC"
      remove_field => [ "time" ]
    }
  }
  else {
    date {
      match => [ "time", "yyyy-MM-dd HH:mm:ss" ]
      timezone => "Europe/Helsinki"
      remove_field => [ "time" ]
    }
  }

  # Map Sonicwall field names to ECS.
  mutate {
    rename => { "app" => "[sonciwall][application][id]" }
    rename => { "arg" => "[url][path]" }
    rename => { "Category" => "[sonciwall][cfs][category]" }
    rename => { "c" => "[sonciwall][category][id]" }
    rename => { "code" => "[sonciwall][cfs][code]" }
    rename => { "dstMac" => "[destination][mac]" }
    rename => { "dstV6" => "[destination][ip]" }
    rename => { "dstname" => "[url][domain]" }
    rename => { "fw" => "[host][ip]" }
    rename => { "fw_action" => "[sonicwall][action]" }
    rename => { "icmpCode" => "[icmp][request][type]" }
    rename => { "id" => "[host][type]" }
    rename => { "m" => "[sonicwall][event][id]" }
    rename => { "note" => "[sonicwall][event][note]" }
    rename => { "msg" => "message" }
    rename => { "nxClientIPAddress" => "[client][ip]" }
    rename => { "op" => "[sonicwall][http][code]" }
    rename => { "packetsIn" => "[source][packets]" }
    rename => { "packetsOut" => "[destination][packets]" }
    rename => { "packetsTotal" => "[network][packets]" }
    rename => { "portal" => "[sonicwall][portal]" }
    rename => { "pri" => "[log][syslog][severity][code]" }
    rename => { "proto" => "[network][protocol]" }
    rename => { "rcvd" => "[source][bytes]" }
    rename => { "rpkt" => "[source][packets]" }
    rename => { "rule" => "[sonicwall][rule][id]" }
    rename => { "sent" => "[destination][bytes]" }
    rename => { "sess" => "[sonicwall][session][type]" }
    rename => { "sn" => "[observer][serial_number]" }
    rename => { "spkt" => "[destination][packets]" }
    rename => { "srcMac" => "[source][mac]" }
    rename => { "srcV6" => "[source][ip]" }
    rename => { "vpnpolicy" => "[sonicwall][vpn][policy]" }
  }

  # Handle Sonicwall rule id.
  if [sonicwall][rule][id] {
    if [sonicwall][rule][id] !~ /^\d+$/ {
      mutate {
        rename => { "[sonicwall][rule][id]" => "[sonicwall][rule][name]" }
      }
    }
  }

  # Handle network protocol.
  if [network][protocol] {
    if "/" in [network][protocol] {
      mutate {
        split => { "[network][protocol]" => "/" }
        add_field => { "[network][transport]" => "%{[network][protocol][0]}" }
      }
      if [network][protocol][1] =~ /\D+/ {
        mutate {
          replace => { "[network][protocol]" => "%{[network][protocol][1]}" }
        }
      }
      else {
        mutate {
          remove_field => [ "[network][protocol]" ]
        }
      }
    }
  }

  # Handle event duration.
  if [cdur] {
    # Connection duration is logged in milliseconds. ECS expects nanoseconds.
    ruby {
      code => "event.set('[event][duration]', Integer(event.get('cdur')) * 1000000 )"
    }
  }
  else if [duration] {
    # VPN session (?) duration is logged in seconds. ECS expects nanoseconds.
    ruby {
      code => "event.set('[event][duration]', Integer(event.get('duration')) * 1000000000 )"
    }
  }

  # Convert agent field type from string to hash.
  if [agent] {
    mutate {
      add_field => { "agent" => "[@metadata][agent]" }
      remove_field => [ "agent" ]
    }
    mutate {
      rename => { "[@metadata][agent]" => "[agent][name]" }
    }
  }

  # Handle username.
  if [usr] and [usr] != "" {
    mutate {
      rename => { "usr" => "[user][name]" }
    }
  }
  if [user] and [user] != "" {
    mutate {
      rename => { "user" => "[user][name]" }
    }
  }
  translate {
    id => "filter-sonicwall-translate-http_code"
    regex => false
    field => "[sonicwall][http][code]"
    destination => "[http][request][method]"
    dictionary => {
      "0" => "other"
      "1" =>  "get"
      "2" =>  "post"
      "3" =>  "head"
    }
    remove_field => [ "[sonicwall][http][code]" ]
  }
  translate {
    id => "filter-sonicwall-translate-category_id"
    regex => false
    field => "[sonciwall][category][id]"
    destination => "[sonciwall][category][name]"
    dictionary => {
      "0" => ""
      "1" =>  "System Maintenance"
      "2" =>  "System Errors"
      "4" =>  "Blocked Web Sites"
      "8" =>  "Blocked Java Etc"
      "16" =>  "User Activity"
      "32" =>  "Attacks"
      "64" =>  "Dropped TCP"
      "128" =>  "Dropped UDP"
      "256" =>  "Dropped ICMP"
      "512" =>  "Network Debug"
      "1024" =>  "Syslog Only For Traffic Reporting"
      "2048" =>  "Dropped LAN TCP"
      "4096" =>  "Dropped LAN UDP"
      "8192" =>  "Dropped LAN ICMP"
      "32768" =>  "Modem Debug"
      "65536" =>  "VPN Tunnel Status"
      "131072" =>  "802.11 Management"
      "262144" =>  "Syslog Only For Traffic Reporting"
      "524288" =>  "System Environment"
      "1048576" =>  "Expanded VOIP Activity"
      "2097152" =>  "Expanded WLAN IDS Activity"
      "4194304" =>  "Expanded SonicPoint Activity"
    }
  }
  translate {
    id => "filter-sonicwall-translate-event_id"
    regex => false
    field => "[sonciwall][event][id]"
    destination => "[sonciwall][event][name]"
    dictionary => {
      "22" =>  "Ping of Death Blocked"
      "23" =>  "IP Spoof Detected"
      "25" =>  "Possible SYN Flood"
      "27" =>  "Land Attack"
      "81" =>  "Smurf Attack"
      "82" =>  "Port Scan Possible"
      "83" =>  "Port Scan Probable"
      "165" =>  "Allow Email Attachment"
      "177" =>  "TCP FIN Scan"
      "178" =>  "TCP Xmas Scan"
      "179" =>  "TCP Null Scan"
      "248" =>  "Email Attachment"
      "267" =>  "TCP Xmas Tree Attack"
      "428" =>  "Drop Source Route Packet"
      "437" =>  "Email Fragment Dropped"
      "446" =>  "FTP Passive Attack"
      "527" =>  "FTP Port Bounce Attack"
      "528" =>  "FTP Passive Bounce Attack"
      "546" =>  "Rogue AP Found"
      "548" =>  "WLAN Association Flood"
      "606" =>  "Spank Attack"
      "608" =>  "IPS Detection Alert"
      "609" =>  "IPS Prevention Alert"
      "615" =>  "WLAN Probe Check"
      "662" =>  "Non SonicPoint Traffic Drop"
      "789" =>  "IDP Detection Alert"
      "790" =>  "IDP Prevention Alert"
      "794" =>  "AntiSpyware Prevention Alert"
      "795" =>  "AntiSpyware Detection Alert"
      "856" =>  "SYN Flood Watch Mode"
      "857" =>  "SYN Flood Trigger Mode"
      "858" =>  "SYN Flood Proxy Mode"
      "859" =>  "SYN Flood Proxy Trigger Mode"
      "860" =>  "SYN Flood Detected"
      "861" =>  "SYN Flood Proxy Mode Cancel"
      "862" =>  "SYN Flood Blacklist On"
      "863" =>  "SYN Flood Blacklist Off"
      "864" =>  "SYN Flooding Machine Blacklisted"
      "865" =>  "Machine removed from SYN Flood Blacklist"
      "866" =>  "Possible SYN Flood Continues"
      "867" =>  "Possible SYN Flood Ceased"
      "868" =>  "SYN Flood Blacklist Continues"
      "869" =>  "TCP SYN Receive"
      "898" =>  "RST Flooding Machine Blacklisted"
      "899" =>  "RST Flood Blacklist Continues"
      "900" =>  "Machine Removed From RST Flood Blacklist"
      "901" =>  "FIN Flooding Machine Blacklisted"
      "902" =>  "FIN Flood Blacklist Continues"
      "903" =>  "Machine Removed From FIN Flood Blacklist"
      "904" =>  "Possible RST Flood"
      "905" =>  "Possible FIN Flood"
      "906" =>  "Possible RST Flood Ceased"
      "907" =>  "Possible FIN Flood Ceased"
      "908" =>  "Possible RST Flood Continues"
      "909" =>  "Possible FIN Flood Continues"
      "1098" =>  "DNS Rebind Attack Detected"
      "1099" =>  "DNS Rebind Attack Blocked"
      "1209" =>  "MAC IP Anti Spoof Check Enforced For Hosts"
      "1210" =>  "MAC IP Anti Spoof Cache Not Found For Router"
      "1211" =>  "MAC IP Anti Spoof Cache Not Router"
      "1212" =>  "MAC IP Anti Spoof Cache Blacklisted Device"
      "1213" =>  "UDP Flood Detected"
      "1214" =>  "ICMP Flood Detected"
      "1366" =>  "TCP Flooding Machine Blacklisted"
      "1367" =>  "TCP Flood Blacklist Continues"
      "1368" =>  "Machine Removed From TCP Flood Blacklist"
      "1369" =>  "Possible TCP Flood"
      "1370" =>  "Possible TCP Flood Ceased"
      "1371" =>  "Possible TCP Flood Continues"
      "1373" =>  "IPv6 fragment size is less than minimum"
      "1374" =>  "IP Reassembly : Incomplete IGMP fragment"
      "1375" =>  "UDP fragmented datagram is too big"
      "1376" =>  "Nestea/Teardr op Attack"
      "1387" =>  "TCP Null Flag Attack"
      "1450" =>  "UDPv6 Flood Detected"
      "1451" =>  "ICMPv6 Flood Detected"
      "1452" =>  "Half Open TCP Connection Threshold Exceeded"
    }
  }
  translate {
    id => "filter-sonicwall-translate-priority_id"
    regex => false
    field => "[log][syslog][severity][code]"
    destination => "[log][syslog][severity][name]"
    dictionary => {
      "0" =>  "Emergency"
      "1" =>  "Alert"
      "2" =>  "Critical"
      "3" =>  "Error"
      "4" =>  "Warning"
      "5" =>  "Notice"
      "6" =>  "Info"
      "7" =>  "Debug"
    }
  }

  # Create network bytes field as a sum of rcvd and sent if bytesTotal doesnt exist.
  if ![bytesTotal] {
    if [source][bytes] and [destination][bytes] {
      ruby {
        code => "event.set('[network][bytes]', Integer(event.get('[source][bytes]')) + Integer(event.get('[destination][bytes]')))"
      }
    }
    else if [source][bytes] {
      ruby {
        code => "event.set('[network][bytes]', Integer(event.get('[source][bytes]')))"
      }
    }
    else if [destination][bytes] {
      ruby {
        code => "event.set('[network][bytes]', Integer(event.get('[destination][bytes]')))"
      }
    }
  }
  else {
    mutate {
      rename => { "bytesTotal" => "[network][bytes]" }
    }
  }

  # If source field exists, parse it.
  if [src] {
    if ":" not in [src] {
        mutate {
          copy => { "src" => "[source][ip]" }
      }
    }
    else if [src] =~ "^::(.*)" {
      # Split source address into port and interface.
      mutate {
        split => { "src" => ":" }
        add_field => { "[source][interface][name]" => "%{[src][2]}" }
      }
    }
    else if [src] =~ "(.*)::$" {
      # Split source address into ip and port
      mutate {
        split => { "src" => ":" }
        add_field => { "[source][ip]" => "%{[src][0]}" }
      }
    }
    else if [src] =~ "^:(.*):(.*)" {
      # Split source address into port and interface.
      mutate {
        split => { "src" => ":" }
        add_field => {
          "[source][port]" => "%{[src][1]}"
          "[source][interface][name]" => "%{[src][2]}"
        }
      }
    }
    else if [src] =~ "(.*)::(.*)" {
      # Split source address into port and interface.
      mutate {
        split => { "src" => ":" }
        add_field => {
          "[source][ip]" => "%{[src][0]}"
          "[source][interface][name]" => "%{[src][2]}"
        }
      }
    }
    else if [src] =~ "(.*):(.*):(.*)" {
      # Split source IP address into IP, port and interface.
      mutate {
        split => { "src" => ":" }
        add_field => {
          "[source][ip]" => "%{[src][0]}"
          "[source][port]" => "%{[src][1]}"
          "[source][interface][name]" => "%{[src][2]}"
        }
      }
    }
    else if [src] =~ "^:(.*)" {
      # Split destination address into ip and port.
      mutate {
        split => { "src" => ":" }
        add_field => { "[source][port]" => "%{[src][1]}" }
      }
    }
    else if [src] =~ "(.*):(.*)" {
      # Split source address into ip and port.
      mutate {
        split => { "src" => ":" }
        add_field => {
          "[source][ip]" => "%{[src][0]}"
          "[source][port]" => "%{[src][1]}"
        }
      }
    }
    else {
      mutate {
        add_tag => [ "src_parse_failure" ]
      }
    }
  }

  # If destination field exists, parse it.
  if [dst] {
    if ":" not in [dst] {
      mutate {
        copy => { "dst" => "[destination][ip]" }
      }
    }
    else if [dst] =~ "^::(.*)" {
      # Split destination address into port and interface.
      mutate {
        split => { "dst" => ":" }
        add_field => { "[destination][interface][name]" => "%{[dst][2]}" }
      }
    }
    else if [dst] =~ "(.*)::$" {
      # Split destination address into ip and port.
      mutate {
        split => { "dst" => ":" }
        add_field => { "[destination][ip]" => "%{[dst][0]}" }
      }
    }
    else if [dst] =~ "^:(.*):(.*)" {
      # Split destination address into port and interface.
      mutate {
        split => { "dst" => ":" }
        add_field => {
          "[destination][port]" => "%{[dst][1]}"
          "[destination][interface][name]" => "%{[dst][2]}"
        }
      }
    }
    else if [dst] =~ "(.*)::(.*)" {
      # Split destination address into port and interface.
      mutate {
        split => { "dst" => ":" }
        add_field => {
          "[destination][ip]" => "%{[dst][0]}"
          "[destination][interface][name]" => "%{[dst][2]}"
        }
      }
    }
    else if [dst] =~ "(.*):(.*):(.*)" {
      # Split destination IP address into IP, port and interface.
      mutate {
        split => { "dst" => ":" }
        add_field => {
          "[destination][ip]" => "%{[dst][0]}"
          "[destination][port]" => "%{[dst][1]}"
          "[destination][interface][name]" => "%{[dst][2]}"
        }
      }
    }
    else if [dst] =~ "^:(.*)" {
      # Split destination address into ip and port.
      mutate {
        split => { "dst" => ":" }
        add_field => { "[destination][port]" => "%{[dst][1]}" }
      }
    }
    else if [dst] =~ "(.*):(.*)" {
      # Split destination address into ip and port.
      mutate {
        split => { "dst" => ":" }
        add_field => {
          "[destination][ip]" => "%{[dst][0]}"
          "[destination][port]" => "%{[dst][1]}"
        }
      }
    }
    else {
      mutate {
        add_tag => [ "dst_parse_failure" ]
      }
    }
  }

  # If source interface fields exists, split it into interface and VLAN.
  if [source][interface][name] {
    if "-" in [source][interface][name] {
      mutate {
        split => { "[source][interface][name]" => "-" }
        add_field => { "[source][vlan][id]" => "%{[source][interface][name][1]}" }
      }
    }
  }

  # If destination interface field exists, split it into interface and VLAN.
  if [destination][interface][name] {
    if "-" in [destination][interface][name] {
      mutate {
        split => { "[destination][interface][name]" => "-" }
        add_field => { "[destination][vlan][id]" => "%{[destination][interface][name][1]}" }
      }
    }
  }

  # Remove "V" from VLAN ID and replace array with interface value.
  if [source][vlan][id] {
    mutate {
      gsub => [ "[source][vlan][id]", "V", "" ]
      replace => { "[source][interface][name]" => "%{[source][interface][name][0]}" }
    }
  }
  if [destination][vlan][id] {
    mutate {
      gsub => [ "[destination][vlan][id]", "V", "" ]
      replace => { "[destination][interface][name]" => "%{[destination][interface][name][0]}" }
    }
  }

  # Remove src and dst arrays.
  if "dst_parse_failure" not in [tags] or "src_parse_failure" not in [tags] {
    mutate {
      remove_field => [ "src", "dst" ]
    }
  }

  # Add ingestion timestamp
  ruby {
    code => "event.set('[event][ingested]', Time.now().utc());"
  }
}
